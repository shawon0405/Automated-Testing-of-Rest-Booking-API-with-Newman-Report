{
	"info": {
		"_postman_id": "c356ab43-eff9-4ac0-b2df-364a2af15f16",
		"name": "Shawon_B24",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33497331",
		"_collection_link": "https://orange-comet-272892.postman.co/workspace/Shawon-Batch-24~36ab07ec-18f6-4eab-8932-02e9cfaf4d7f/collection/33497331-c356ab43-eff9-4ac0-b2df-364a2af15f16?action=share&source=collection_link&creator=33497331"
	},
	"item": [
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"\r",
							"pm.environment.set(\"id\",jsonData.bookingid)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"firstName\",firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastName)\r",
							"pm.environment.set(\"lastName\",lastName)\r",
							"\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(totalPrice)\r",
							"pm.environment.set(\"totalPrice\",totalPrice)\r",
							"\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositPaid\",depositPaid)\r",
							"//date\r",
							"const date = require(\"moment\")\r",
							"const today = date()\r",
							"console.log(today.format('YYYY-MM-DD'))\r",
							"\r",
							"var checkin = today.add(3,'d').format('YYYY-MM-DD')\r",
							"console.log(checkin)\r",
							"pm.environment.set(\"checkin\",checkin)\r",
							"\r",
							"var checkout = today.add(5,'d').format(\"YYYY-MM-DD\")\r",
							"console.log(checkout)\r",
							"pm.environment.set(\"checkout\",checkout)\r",
							"\r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomNoun}}\")\r",
							"console.log(additionalneeds)\r",
							"pm.environment.set(\"additionalneeds\",additionalneeds)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : {{totalPrice}},\r\n\t\"depositpaid\" : {{depositPaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking/",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseCode = pm.response.code\r",
							"console.log(responseCode)\r",
							"\r",
							"if(responseCode == 200){\r",
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"First Name Validation\",function(){\r",
							"pm.expect(pm.environment.get(\"firstName\")).to.eql(jsonData.firstname)\r",
							"})\r",
							"\r",
							"pm.test(\"Last Name Validation\",function(){\r",
							"pm.expect(pm.environment.get(\"lastName\")).to.eql(jsonData.lastname)\r",
							"})\r",
							"\r",
							"pm.test(\"Total Price Validation\", function (){\r",
							"    pm.expect(pm.environment.get(\"totalPrice\")).to.eql(jsonData.totalprice.toString())\r",
							"})\r",
							"\r",
							"pm.test(\"Deposit Paid Validation\", function (){\r",
							"    pm.expect(pm.environment.get(\"depositPaid\")).to.eql(jsonData.depositpaid.toString())\r",
							"})\r",
							"\r",
							"pm.test(\"CheckIn Date Validation\",function(){\r",
							"pm.expect(pm.environment.get(\"checkin\")).to.eql(jsonData.bookingdates.checkin)\r",
							"})\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"}else if(responseCode == 404){\r",
							"    pm.test(\"Not Found\")\r",
							"}else if(responseCode==500){\r",
							"    pm.test(\"Server Error\")\r",
							"}else{\r",
							"    pm.test(\"Something went wrong, Please check it\")\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"token\",jsonData.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/auth",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var updatedfirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(updatedfirstName)\r",
							"pm.environment.set(\"updatedfirstName\",updatedfirstName)\r",
							"\r",
							"var updatedlastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(updatedlastName)\r",
							"pm.environment.set(\"updatedlastName\",updatedlastName)\r",
							"\r",
							"var updatedtotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(updatedtotalPrice)\r",
							"pm.environment.set(\"updatedtotalPrice\",updatedtotalPrice)\r",
							"\r",
							"var updateddepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"updateddepositPaid\",updateddepositPaid)\r",
							"//date\r",
							"const date = require(\"moment\")\r",
							"const today = date()\r",
							"console.log(today.format('YYYY-MM-DD'))\r",
							"\r",
							"var updatecheckin = today.add(3,'d').format('YYYY-MM-DD')\r",
							"console.log(updatecheckin)\r",
							"pm.environment.set(\"updatecheckin\",updatecheckin)\r",
							"\r",
							"var updatecheckout = today.add(5,'d').format(\"YYYY-MM-DD\")\r",
							"console.log(updatecheckout)\r",
							"pm.environment.set(\"updatecheckout\",updatecheckout)\r",
							"\r",
							"var updateadditionalneeds = pm.variables.replaceIn(\"{{$randomNoun}}\")\r",
							"console.log(updateadditionalneeds)\r",
							"pm.environment.set(\"updateadditionalneeds\",updateadditionalneeds)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{updatedfirstName}}\",\r\n    \"lastname\": \"{{updatedlastName}}\",\r\n    \"totalprice\": {{updatedtotalPrice}},\r\n    \"depositpaid\": {{updateddepositPaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{updatecheckin}}\",\r\n        \"checkout\": \"{{updatecheckout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{updateadditionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Updated Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseCode = pm.response.code;\r",
							"var bookinginfo = pm.response.json();\r",
							"\r",
							"if (responseCode === 200) {\r",
							"   pm.test(\"Updated First name validation\", function () {\r",
							"       pm.expect(pm.environment.get(\"updatedfirstName\")).to.eql(bookinginfo.firstname);\r",
							"   });\r",
							"\r",
							"   pm.test(\"Updated Last name validation\", function () {\r",
							"       pm.expect(pm.environment.get(\"updatedlastName\")).to.eql(bookinginfo.lastname);\r",
							"   });\r",
							"\r",
							"   pm.test(\"Updated Total Price validation\", function () {\r",
							"       pm.expect(pm.environment.get(\"updatedtotalPrice\")).to.eql(bookinginfo.totalprice.toString());\r",
							"   });\r",
							"\r",
							"   pm.test(\"Updated Deposit paid validation\", function () {\r",
							"       pm.expect(pm.environment.get(\"updateddepositPaid\")).to.eql(bookinginfo.depositpaid.toString());\r",
							"   });\r",
							"\r",
							"   pm.test(\"Updated CheckIn date validation\", function () {\r",
							"       pm.expect(pm.environment.get(\"updatecheckin\")).to.eql(bookinginfo.bookingdates.checkin);\r",
							"   });\r",
							"\r",
							"   pm.test(\"Updated CheckOutdate validation\", function () {\r",
							"       pm.expect(pm.environment.get(\"updatecheckout\")).to.eql(bookinginfo.bookingdates.checkout);\r",
							"   });\r",
							"\r",
							"   pm.test(\"Updated Additionalneeds validation\", function () {\r",
							"       pm.expect(pm.environment.get(\"updateadditionalneeds\")).to.eql(bookinginfo.additionalneeds);\r",
							"   });\r",
							"} else if (responseCode === 403) {\r",
							"   pm.test(\"Forbidden\");\r",
							"} else if (responseCode === 404) {\r",
							"   pm.test(\"Not Found\");\r",
							"} else if (responseCode === 500) {\r",
							"   pm.test(\"Server error\");\r",
							"} else {\r",
							"   pm.test(\"Something went wrong. Please check it\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseCode = pm.response.code\r",
							"console.log(responseCode)\r",
							"\r",
							"if(responseCode == 200){\r",
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"First Name Validation\",function(){\r",
							"pm.expect(pm.environment.get(\"firstName\")).to.eql(jsonData.firstname)\r",
							"})\r",
							"\r",
							"pm.test(\"Last Name Validation\",function(){\r",
							"pm.expect(pm.environment.get(\"lastName\")).to.eql(jsonData.lastname)\r",
							"})\r",
							"\r",
							"pm.test(\"Total Price Validation\", function (){\r",
							"    pm.expect(pm.environment.get(\"totalPrice\")).to.eql(jsonData.totalprice.toString())\r",
							"})\r",
							"\r",
							"pm.test(\"Deposit Paid Validation\", function (){\r",
							"    pm.expect(pm.environment.get(\"depositPaid\")).to.eql(jsonData.depositpaid.toString())\r",
							"})\r",
							"\r",
							"pm.test(\"CheckIn Date Validation\",function(){\r",
							"pm.expect(pm.environment.get(\"checkin\")).to.eql(jsonData.checkin)\r",
							"})\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"}else if(responseCode == 404){\r",
							"    pm.test(\"Delete Successful\")\r",
							"}else if(responseCode==500){\r",
							"    pm.test(\"Server Error\")\r",
							"}else{\r",
							"    pm.test(\"Something went wrong, Please check it\")\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}